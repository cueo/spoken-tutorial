00:01
 Welcome to the spoken tutorial on Arithmetic Operators in C And C++.

 00:07
 In this tutorial, we will learn about:

 00:10
Arithmetic operators like

 00:11
 '+' Addition: e.g. a+b.

 00:14
 '-' Subtraction: e.g. a-b.

 00:18
'/' Division: e.g. a/b.

 00:20
 '*'  Multiplication: e.g. a*b.

 00:24
'%' Modulus: e.g. a%b.

  00:27
 To record this tutorial, I am using: Ubuntu 11.10 as the operating system

 00:32
gcc and g++ Compiler version 4.6.1 in Ubuntu.

00:38
 I will now demonstrate the use of these arithmetic operations with the help of a C program.

  00:44
  I have already written the program.

 00:47
So, I will open the editor and explain the code.

  00:49
 Here is the C program for arithmetic operators.

 00:56
 In the first two statements, the variables are declared and defined.

 01:02
In the next two statements,

 01:04
a is assigned the value of 5.

 01:06
b is assigned the value of 2.

  01:10
  Now let's see how the addition operator works.

 01:14
c holds the sum of a and b.

  01:19
  This printf statement displays the sum of a and b on the screen.

 01:28
Here % dot 2f provides the precision of two digits after the decimal point.

 01:37
   In the next statement, c holds the product of a and b.

  01:43
  This printf statement displays the product of a and b on the screen.

 01:48
Let's see how these two operators work.

  01:52
  We will comment out the following lines.

 01:55
Type  /* (slash asterisk)

 02:01
  */ 

 02:05
  Click on Save.

 02:07
Save the file with extension .c (dot c).

 02:10
I have saved my file as arithmetic.c.

  02:15
 Open the terminal window by pressing Ctrl, Alt and T keys simultaneously.

 02:22
 To compile the code, type the following on the terminal.

 02:27
gcc space arithmetic dot c space minus o space arith

 02:38
Press Enter.

 02:40
To execute the code, type ./arith (dot slash arith).

  02:48
   press Enter.

  02:50
  The output is displayed on the screen.

 02:53
It shows,

 02:54
Sum of 5 and 2 is 7.00 and

 02:59
Product of 5and 2 is 10.00.

  03:03
  Now you should try the subtraction operator on your own.

 03:08
Try replacing the addition operator with subtraction operator.

 03:13
You should get the result as 3.

  03:18
  Coming back to the program and the last set of statements.

 03:23
Now, I will explain the code for division.

 03:26
Remove the multiline comments  here and here.

  03:34
  In these statements, c holds the value of integer division of a by b.

 03:40
Please note that in integer division the fractional part is truncated.

  03:47
 The printf statement displays the division output on the screen.

  03:57
  In this statement we are performing real division.

 04:02
Here one of the operands has to be cast as float.


04:10
 We have type-cast variable a.

 04:13
Now a will behave as a float variable for a single operation.

 04:22
The printf statement displays the output of real division on the screen.

04:30
 Type return 0; and close the ending curly bracket.

  04:37
  Click on Save.

 04:40
 Coming back to the terminal to compile and execute the code.

 04:45
 To compile, typegcc space arithmetic dot c minus o space arith. Press Enter.

 04:59
To execute the code, type ./arith. Press Enter.

  05:05
 The output is displayed on the screen.

 05:08
We have the previous outputs of addition and multiplication operators.

  05:16
We have the integer Division of 5 by 2 is 2.

05:22
We can see  that  in integer division the fractional part is truncated.

 05:29
Then we have  the real division of 5 by 2 is 2.5.

 05:35
In real division, the result is as expected.

 05:37
We  used type-casting to obtain these results.

 05:45
  Now suppose, I want to write the same program in C++.

 05:50
Let's see  if I can use the same code in C++ too?

 05:54
  Let's find out.

 05:56
Let me go back to the editor.

 06:00
  Here is a C++ code.

  06:05
  Notice that the header is different from the C file header.

 06:12
namespace is also used here.

  06:18
  Also, notice that the output statement in C++ is cout.

  06:25
  So, apart from these differences, the two codes are very similar.

  06:32
 Click on Save.

 06:33
Make sure the file is saved with the extension .cpp.

 06:37
I have saved my file as arithmetic.cpp.

 06:41
 Let's execute the code and see what results we get.

 06:49
Open the terminal and type  g++ space arithmetic dot cpp space  minus o arith . Press Enter.

 07:09
 To  execute the  code, type  ./ arith. Press Enter.

 07:16
 Here the output is displayed.

 07:19
So, we see that  the results are similar to the C program.

 07:23
The only difference is in the precisions of outputs.

  07:29
  Let us now summarize the tutorial.

 07:32
In this tutorial we learnt how to use the arithmetic operators.

  07:36
  As an assignment:

 07:38
Write a program to demonstrate the use of modulus operator.

 07:42
Please note that Modulus operator finds the remainder of division.  e.g. c = a % b;

 07:50
You should obtain the result as 1.

 07:55
  Watch the video available at the following link.

 07:57
It summarizes the Spoken Tutorial project.

 08:00
If you do not have good bandwidth, you can download and watch it.

 08:05
 The Spoken Tutorial Project Team: Conducts workshops using spoken tutorials.

 08:09
 Gives certificates to those who pass an online test.

 08:14
 For more details, please write to contact at spoken hyphen tutorial dot org.

  08:20
 Spoken Tutorial Project is a part of the Talk to a Teacher project.

 08:25
 It is supported by the National Mission on Education through ICT, MHRD, Government of India.

 08:30
 More information on this Mission is available at

 08:33
 spoken hyphen tutorial dot org slash NMEICT hyphen Intro

   08:41
  This is Ritwik Joshi from IIT Bombay.
Thank you for joining. 
