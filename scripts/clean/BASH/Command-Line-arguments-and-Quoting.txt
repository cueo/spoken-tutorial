Welcome spoken tutorial Command line arguments Quoting BASH. In tutorial, learn about: * Command line Arguments * Quoting. To follow tutorial, familiar Linux Operating System. If not, relevant tutorials please visit website shown. For tutorial, I using: * Ubuntu Linux 12.04 OS * GNU Bash version 4.1.10 GNU Bash version 4 recommended practice. Shell script accept arguments command line. An argument passed program called. Any number arguments passed program. Let us open terminal pressing Ctrl, Alt T keys simultaneously keyboard. I already written code file named arg.sh. On terminal, let open file typing- gedit space arg.sh space ampersand sign(&). We use ampersand free prompt. Now, press Enter. The text editor opened. Let explain code now. This shebang line. This line print zeroth argument. Here, $0 (Dollar zero) print name shell script. This, turn, means zeroth argument name program itself. Let us execute program see. Switch terminal. First, make file executable typing: chmod space plus x space arg.sh Press Enter. Now, type: dot slash arg.sh Press Enter. The output displayed as: Zeroth argument arg.sh. Now, come back editor type three lines shown here. $1 (Dollar one) represents first argument passed program command line. $2 (Dollar two) represents second argument passed program $3 (Dollar three) represents third argument. Now, click Save. Let us execute program see. Press up-arrow key, press Enter. We see zeroth argument printed first, second third arguments blank. This command line arguments given execution. Hence, press up-arrow key type: sunday monday tuesday Press Enter. You see first, second third arguments sunday monday tuesday. Now switch back editor. Press Enter. Now, type line shown here. $12 (Dollar twelve) represents twelfth argument. To write argument greater 9, need use curly brackets. Else, bash take argument integer ten's place get expected output. Now click Save. Let us execute program. Switch terminal. Let clear prompt. Now need give 12 13 arguments program. Hence, type: dot slash arg.sh space 1 13. Now press Enter. You see 12th argument 12. Come back editor type line shown here. $# (Dollar hash) gives total number arguments passed program. Now click Save. Let us execute. Switch terminal. Let us execute. Press up-arrow key press Enter. We see total arguments 13. Now switch editor. Press Enter type lines shown here. $* (Dollar asterisk) print arguments single line. We test help simple loop. We analyze loop time execution. Now, click Save. Switch terminal. Let clear prompt. Now, let us type: dot slash arg.sh space sunday monday tuesday. Press Enter. You see total number arguments 3 passed 3 arguments program. As already said, $* print arguments single line. And output loop. We see arguments printed single line. Now, move back program type lines shown here. $@ (Dollar at) also print arguments. However, time argument printed separate line. This another loop print argument separate line. Let us see how. Click Save. Switch terminal. Press up-arrow key. Press Enter. You see difference now. These arguments printed $@. $@ prints argument separate line. This output 2nd loop. Now let's move quoting BASH. Switch slides. There three types quotes: * Double quote * Single quote * Backslash. Double quote substitutes value variables commands. Example echo “Username $USER”. It displays username system. Switch Terminal. Let clear prompt. Now, type: echo space within double quotes Username space dollar USER capitals. Press Enter. The username system printed. The output vary according system. Now move back slides. Single quotes preserves literal meaning character given string. It used turn special meaning characters. Switch Terminal. Type: echo space within single quote Username dollar USER capital. Press Enter. The output Username $USER. In example, prints characters appear within single quotes. It substitute value variable $USER. Switch back slides. Backslash removes special meaning single character. It used escape character BASH. Switch Terminal. Now, type: echo space within double quote Username backslash dollar USER (in capital). Since given double quotes, expect echo command display username. Let's try command, press Enter. The output Username $USER. In example, backslash removes special meaning (Dollar) '$' symbol. $USER treated string without special functionality. This brings us end tutorial. Switch back slides. Let us summarize. In tutorial, learnt: * Command line arguments * Functionality double quote, single quote backslash. Watch video available link shown below. It summarizes Spoken-Tutorial project. If good bandwidth, download watch it. The Spoken Tutorial Project team: Conducts workshops using spoken tutorials. Gives certificates pass online test. For details, please write contact@spoken-tutorial.org Spoken Tutorial Project part "Talk Teacher" project. It supported National Mission Education ICT, MHRD, Government India. More information mission available at: http://spoken-tutorial.org/NMEICT-Intro The script contributed FOSSEE spoken-tutorial team. And Ashwini Patil IIT Bombay, signing off. Thank joining.